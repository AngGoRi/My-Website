#include <iostream>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/thread/thread.hpp>

using boost::asio::ip::tcp;

class WebServer {
public:
    WebServer(boost::asio::io_service& io_service, short port)
        : io_service_(io_service),
          acceptor_(io_service, tcp::endpoint(tcp::v4(), port))
    {
        startAccept();
    }

private:
    void startAccept()
    {
        tcp::socket* socket = new tcp::socket(io_service_);
        acceptor_.async_accept(*socket,
            boost::bind(&WebServer::handleAccept, this, socket,
                boost::asio::placeholders::error));
    }

    void handleAccept(tcp::socket* socket, const boost::system::error_code& error)
    {
        if (!error) {
            boost::asio::async_write(*socket,
                boost::asio::buffer("HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, World!"),
                boost::bind(&WebServer::handleRequest, this, socket,
                    boost::asio::placeholders::error));
        } else {
            delete socket;
        }

        startAccept();
    }

    void handleRequest(tcp::socket* socket, const boost::system::error_code& error)
    {
        if (!error) {
            delete socket;
        }
    }

    boost::asio::io_service& io_service_;
    tcp::acceptor acceptor_;
};

int main()
{
    try {
        boost::asio::io_service io_service;

        WebServer server(io_service, 8080);

        boost::thread_group thread_pool;
        for (std::size_t i = 0; i < boost::thread::hardware_concurrency(); ++i) {
            thread_pool.create_thread(boost::bind(&boost::asio::io_service::run, &io_service));
        }

        thread_pool.join_all();
    } catch (std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
